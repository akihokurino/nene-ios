//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `GoogleService-Info-Dev.plist`.
    static let googleServiceInfoDevPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info-Dev", pathExtension: "plist")
    /// Resource file `GoogleService-Info-Prod.plist`.
    static let googleServiceInfoProdPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info-Prod", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info-Dev", withExtension: "plist")`
    static func googleServiceInfoDevPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoDevPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info-Prod", withExtension: "plist")`
    static func googleServiceInfoProdPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoProdPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 16 images.
  struct image {
    /// Image `header_logo`.
    static let header_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_logo")
    /// Image `hourglass`.
    static let hourglass = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourglass")
    /// Image `icon_arrow`.
    static let icon_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow")
    /// Image `icon_close`.
    static let icon_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close")
    /// Image `icon_done`.
    static let icon_done = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_done")
    /// Image `icon_home`.
    static let icon_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home")
    /// Image `icon_profile`.
    static let icon_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_profile")
    /// Image `icon_right_arrow`.
    static let icon_right_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_right_arrow")
    /// Image `icon_setting`.
    static let icon_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting")
    /// Image `logo_narrow`.
    static let logo_narrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_narrow")
    /// Image `success`.
    static let success = Rswift.ImageResource(bundle: R.hostingBundle, name: "success")
    /// Image `waitinglist`.
    static let waitinglist = Rswift.ImageResource(bundle: R.hostingBundle, name: "waitinglist")
    /// Image `walkthrough_01`.
    static let walkthrough_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthrough_01")
    /// Image `walkthrough_02`.
    static let walkthrough_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthrough_02")
    /// Image `walkthrough_03`.
    static let walkthrough_03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthrough_03")
    /// Image `walkthrough_bg`.
    static let walkthrough_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthrough_bg")
    
    /// `UIImage(named: "header_logo", bundle: ..., traitCollection: ...)`
    static func header_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hourglass", bundle: ..., traitCollection: ...)`
    static func hourglass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hourglass, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_arrow", bundle: ..., traitCollection: ...)`
    static func icon_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_close", bundle: ..., traitCollection: ...)`
    static func icon_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_done", bundle: ..., traitCollection: ...)`
    static func icon_done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_done, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_home", bundle: ..., traitCollection: ...)`
    static func icon_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_profile", bundle: ..., traitCollection: ...)`
    static func icon_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_right_arrow", bundle: ..., traitCollection: ...)`
    static func icon_right_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_right_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting", bundle: ..., traitCollection: ...)`
    static func icon_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_narrow", bundle: ..., traitCollection: ...)`
    static func logo_narrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_narrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "success", bundle: ..., traitCollection: ...)`
    static func success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "waitinglist", bundle: ..., traitCollection: ...)`
    static func waitinglist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.waitinglist, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "walkthrough_01", bundle: ..., traitCollection: ...)`
    static func walkthrough_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthrough_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "walkthrough_02", bundle: ..., traitCollection: ...)`
    static func walkthrough_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthrough_02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "walkthrough_03", bundle: ..., traitCollection: ...)`
    static func walkthrough_03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthrough_03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "walkthrough_bg", bundle: ..., traitCollection: ...)`
    static func walkthrough_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthrough_bg, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `SubscriptionCancelView`.
    static let subscriptionCancelView = _R.nib._SubscriptionCancelView()
    /// Nib `SuccessDialog`.
    static let successDialog = _R.nib._SuccessDialog()
    
    /// `UINib(name: "SubscriptionCancelView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subscriptionCancelView) instead")
    static func subscriptionCancelView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subscriptionCancelView)
    }
    
    /// `UINib(name: "SuccessDialog", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.successDialog) instead")
    static func successDialog(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.successDialog)
    }
    
    static func subscriptionCancelView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubscriptionCancelView? {
      return R.nib.subscriptionCancelView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubscriptionCancelView
    }
    
    static func successDialog(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuccessDialog? {
      return R.nib.successDialog.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuccessDialog
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BookingCell`.
    static let bookingCell: Rswift.ReuseIdentifier<BookingCell> = Rswift.ReuseIdentifier(identifier: "BookingCell")
    /// Reuse identifier `MyMessageCell`.
    static let myMessageCell: Rswift.ReuseIdentifier<MyMessageCell> = Rswift.ReuseIdentifier(identifier: "MyMessageCell")
    /// Reuse identifier `YourMessageCell`.
    static let yourMessageCell: Rswift.ReuseIdentifier<YourMessageCell> = Rswift.ReuseIdentifier(identifier: "YourMessageCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 16 storyboards.
  struct storyboard {
    /// Storyboard `ChatRoom`.
    static let chatRoom = _R.storyboard.chatRoom()
    /// Storyboard `EnterPinCode`.
    static let enterPinCode = _R.storyboard.enterPinCode()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Launch`.
    static let launch = _R.storyboard.launch()
    /// Storyboard `NotificationSetting`.
    static let notificationSetting = _R.storyboard.notificationSetting()
    /// Storyboard `PhoneNumberBySignUp`.
    static let phoneNumberBySignUp = _R.storyboard.phoneNumberBySignUp()
    /// Storyboard `PhoneNumber`.
    static let phoneNumber = _R.storyboard.phoneNumber()
    /// Storyboard `PinCode`.
    static let pinCode = _R.storyboard.pinCode()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `QueuingList`.
    static let queuingList = _R.storyboard.queuingList()
    /// Storyboard `Setting`.
    static let setting = _R.storyboard.setting()
    /// Storyboard `Subscription`.
    static let subscription = _R.storyboard.subscription()
    /// Storyboard `TabBar`.
    static let tabBar = _R.storyboard.tabBar()
    /// Storyboard `WalkThrough`.
    static let walkThrough = _R.storyboard.walkThrough()
    /// Storyboard `WebView`.
    static let webView = _R.storyboard.webView()
    
    /// `UIStoryboard(name: "ChatRoom", bundle: ...)`
    static func chatRoom(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.chatRoom)
    }
    
    /// `UIStoryboard(name: "EnterPinCode", bundle: ...)`
    static func enterPinCode(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.enterPinCode)
    }
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "Launch", bundle: ...)`
    static func launch(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launch)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "NotificationSetting", bundle: ...)`
    static func notificationSetting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notificationSetting)
    }
    
    /// `UIStoryboard(name: "PhoneNumber", bundle: ...)`
    static func phoneNumber(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.phoneNumber)
    }
    
    /// `UIStoryboard(name: "PhoneNumberBySignUp", bundle: ...)`
    static func phoneNumberBySignUp(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.phoneNumberBySignUp)
    }
    
    /// `UIStoryboard(name: "PinCode", bundle: ...)`
    static func pinCode(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pinCode)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "QueuingList", bundle: ...)`
    static func queuingList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.queuingList)
    }
    
    /// `UIStoryboard(name: "Setting", bundle: ...)`
    static func setting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.setting)
    }
    
    /// `UIStoryboard(name: "Subscription", bundle: ...)`
    static func subscription(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.subscription)
    }
    
    /// `UIStoryboard(name: "TabBar", bundle: ...)`
    static func tabBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tabBar)
    }
    
    /// `UIStoryboard(name: "WalkThrough", bundle: ...)`
    static func walkThrough(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walkThrough)
    }
    
    /// `UIStoryboard(name: "WebView", bundle: ...)`
    static func webView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.webView)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SuccessDialog.validate()
    }
    
    struct _SubscriptionCancelView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SubscriptionCancelView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubscriptionCancelView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubscriptionCancelView
      }
      
      fileprivate init() {}
    }
    
    struct _SuccessDialog: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SuccessDialog"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuccessDialog? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuccessDialog
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "success", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'success' is used in nib 'SuccessDialog', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try chatRoom.validate()
      try enterPinCode.validate()
      try home.validate()
      try launch.validate()
      try launchScreen.validate()
      try notificationSetting.validate()
      try phoneNumber.validate()
      try phoneNumberBySignUp.validate()
      try pinCode.validate()
      try profile.validate()
      try queuingList.validate()
      try setting.validate()
      try subscription.validate()
      try tabBar.validate()
      try walkThrough.validate()
      try webView.validate()
    }
    
    struct chatRoom: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let chatRoomViewController = StoryboardViewControllerResource<ChatRoomViewController>(identifier: "ChatRoomViewController")
      let name = "ChatRoom"
      
      func chatRoomViewController(_: Void = ()) -> ChatRoomViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatRoomViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close' is used in storyboard 'ChatRoom', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.chatRoom().chatRoomViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatRoomViewController' could not be loaded from storyboard 'ChatRoom' as 'ChatRoomViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct enterPinCode: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = EnterPincodeViewController
      
      let bundle = R.hostingBundle
      let enterPincodeViewController = StoryboardViewControllerResource<EnterPincodeViewController>(identifier: "EnterPincodeViewController")
      let name = "EnterPinCode"
      
      func enterPincodeViewController(_: Void = ()) -> EnterPincodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: enterPincodeViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.enterPinCode().enterPincodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'enterPincodeViewController' could not be loaded from storyboard 'EnterPinCode' as 'EnterPincodeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct home: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "Home"
      
      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.home().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launch: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LaunchViewController
      
      let bundle = R.hostingBundle
      let name = "Launch"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo_narrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_narrow' is used in storyboard 'Launch', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo_narrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_narrow' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct notificationSetting: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NotificationSetting"
      let notificationSettingViewController = StoryboardViewControllerResource<NotificationSettingViewController>(identifier: "NotificationSettingViewController")
      
      func notificationSettingViewController(_: Void = ()) -> NotificationSettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationSettingViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow' is used in storyboard 'NotificationSetting', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.notificationSetting().notificationSettingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationSettingViewController' could not be loaded from storyboard 'NotificationSetting' as 'NotificationSettingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct phoneNumber: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PhoneNumberViewController
      
      let bundle = R.hostingBundle
      let name = "PhoneNumber"
      let phoneNumberViewController = StoryboardViewControllerResource<PhoneNumberViewController>(identifier: "PhoneNumberViewController")
      
      func phoneNumberViewController(_: Void = ()) -> PhoneNumberViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: phoneNumberViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow' is used in storyboard 'PhoneNumber', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.phoneNumber().phoneNumberViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'phoneNumberViewController' could not be loaded from storyboard 'PhoneNumber' as 'PhoneNumberViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct phoneNumberBySignUp: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PhoneNumberBySignUpViewController
      
      let bundle = R.hostingBundle
      let name = "PhoneNumberBySignUp"
      let phoneNumberBySignUpViewController = StoryboardViewControllerResource<PhoneNumberBySignUpViewController>(identifier: "PhoneNumberBySignUpViewController")
      
      func phoneNumberBySignUpViewController(_: Void = ()) -> PhoneNumberBySignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: phoneNumberBySignUpViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "waitinglist", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'waitinglist' is used in storyboard 'PhoneNumberBySignUp', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.phoneNumberBySignUp().phoneNumberBySignUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'phoneNumberBySignUpViewController' could not be loaded from storyboard 'PhoneNumberBySignUp' as 'PhoneNumberBySignUpViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct pinCode: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PinCodeViewController
      
      let bundle = R.hostingBundle
      let name = "PinCode"
      let pinCodeViewController = StoryboardViewControllerResource<PinCodeViewController>(identifier: "PinCodeViewController")
      
      func pinCodeViewController(_: Void = ()) -> PinCodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pinCodeViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow' is used in storyboard 'PinCode', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.pinCode().pinCodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pinCodeViewController' could not be loaded from storyboard 'PinCode' as 'PinCodeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Profile"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")
      
      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_done", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_done' is used in storyboard 'Profile', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.profile().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct queuingList: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QueuingList"
      let queuingListViewController = StoryboardViewControllerResource<QueuingListViewController>(identifier: "QueuingListViewController")
      
      func queuingListViewController(_: Void = ()) -> QueuingListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: queuingListViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "hourglass", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hourglass' is used in storyboard 'QueuingList', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.queuingList().queuingListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'queuingListViewController' could not be loaded from storyboard 'QueuingList' as 'QueuingListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct setting: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Setting"
      let settingViewController = StoryboardViewControllerResource<SettingViewController>(identifier: "SettingViewController")
      
      func settingViewController(_: Void = ()) -> SettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_right_arrow' is used in storyboard 'Setting', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.setting().settingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingViewController' could not be loaded from storyboard 'Setting' as 'SettingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct subscription: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Subscription"
      let subscriptionViewController = StoryboardViewControllerResource<SubscriptionViewController>(identifier: "SubscriptionViewController")
      
      func subscriptionViewController(_: Void = ()) -> SubscriptionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: subscriptionViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow' is used in storyboard 'Subscription', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_done", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_done' is used in storyboard 'Subscription', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.subscription().subscriptionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'subscriptionViewController' could not be loaded from storyboard 'Subscription' as 'SubscriptionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct tabBar: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarViewController
      
      let bundle = R.hostingBundle
      let name = "TabBar"
      let tabBarViewController = StoryboardViewControllerResource<TabBarViewController>(identifier: "TabBarViewController")
      
      func tabBarViewController(_: Void = ()) -> TabBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBarViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.tabBar().tabBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBarViewController' could not be loaded from storyboard 'TabBar' as 'TabBarViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walkThrough: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalkThrough"
      let walkThroughFirstViewController = StoryboardViewControllerResource<WalkThroughFirstViewController>(identifier: "WalkThroughFirstViewController")
      let walkThroughPageViewController = StoryboardViewControllerResource<WalkThroughPageViewController>(identifier: "WalkThroughPageViewController")
      let walkThroughSecondViewController = StoryboardViewControllerResource<WalkThroughSecondViewController>(identifier: "WalkThroughSecondViewController")
      let walkThroughThirdViewController = StoryboardViewControllerResource<WalkThroughThirdViewController>(identifier: "WalkThroughThirdViewController")
      let walkThroughViewController = StoryboardViewControllerResource<WalkThroughViewController>(identifier: "WalkThroughViewController")
      
      func walkThroughFirstViewController(_: Void = ()) -> WalkThroughFirstViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walkThroughFirstViewController)
      }
      
      func walkThroughPageViewController(_: Void = ()) -> WalkThroughPageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walkThroughPageViewController)
      }
      
      func walkThroughSecondViewController(_: Void = ()) -> WalkThroughSecondViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walkThroughSecondViewController)
      }
      
      func walkThroughThirdViewController(_: Void = ()) -> WalkThroughThirdViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walkThroughThirdViewController)
      }
      
      func walkThroughViewController(_: Void = ()) -> WalkThroughViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walkThroughViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "walkthrough_01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'walkthrough_01' is used in storyboard 'WalkThrough', but couldn't be loaded.") }
        if UIKit.UIImage(named: "walkthrough_02", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'walkthrough_02' is used in storyboard 'WalkThrough', but couldn't be loaded.") }
        if UIKit.UIImage(named: "walkthrough_03", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'walkthrough_03' is used in storyboard 'WalkThrough', but couldn't be loaded.") }
        if UIKit.UIImage(named: "walkthrough_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'walkthrough_bg' is used in storyboard 'WalkThrough', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.walkThrough().walkThroughFirstViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walkThroughFirstViewController' could not be loaded from storyboard 'WalkThrough' as 'WalkThroughFirstViewController'.") }
        if _R.storyboard.walkThrough().walkThroughPageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walkThroughPageViewController' could not be loaded from storyboard 'WalkThrough' as 'WalkThroughPageViewController'.") }
        if _R.storyboard.walkThrough().walkThroughSecondViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walkThroughSecondViewController' could not be loaded from storyboard 'WalkThrough' as 'WalkThroughSecondViewController'.") }
        if _R.storyboard.walkThrough().walkThroughThirdViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walkThroughThirdViewController' could not be loaded from storyboard 'WalkThrough' as 'WalkThroughThirdViewController'.") }
        if _R.storyboard.walkThrough().walkThroughViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walkThroughViewController' could not be loaded from storyboard 'WalkThrough' as 'WalkThroughViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct webView: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WebView"
      let webViewController = StoryboardViewControllerResource<WebViewController>(identifier: "WebViewController")
      
      func webViewController(_: Void = ()) -> WebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: webViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow' is used in storyboard 'WebView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.webView().webViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'webViewController' could not be loaded from storyboard 'WebView' as 'WebViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
